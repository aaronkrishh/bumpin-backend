// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Stage {
  PREP
  POOL
  PLAYOFF
  COMPLETE
}

model Tournament {
  id          Int      @id @default(autoincrement())
  name        String
  teamCount   Int
  teams       Team[]
  bracketType Int
  stage       Stage    @default(PREP)
  poolsCount  Int
  scores      Score[]
  matches     Match[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum GameType {
  POOL
  PREQUARTERS
  QUARTERS
  SEMIS
  FINALS
  BRONZE
  CONSOLATION
}

enum WinnerTeam {
  A
  B
}

model Score {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  teamAId      Int
  teamA        Team       @relation("TeamAScores", fields: [teamAId], references: [id])
  teamBId      Int
  teamB        Team       @relation("TeamBScores", fields: [teamBId], references: [id])
  teamAPoints  Int[]
  teamBPoints  Int[]
  sets         Int
  gameType     GameType
  winner       WinnerTeam
  match        Match?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum MatchState {
  DONE
  SCHEDULED
}

model Match {
  id           Int        @id @default(autoincrement())
  name         String // QF 1, QF 2, etc
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  score        Score?     @relation(fields: [scoreId], references: [id])
  scoreId      Int?       @unique
  state        MatchState @default(SCHEDULED)
  teamAId      Int?
  teamA        Team?      @relation("TeamAMatches", fields: [teamAId], references: [id])
  teamBId      Int?
  teamB        Team?      @relation("TeamBMatches", fields: [teamBId], references: [id])
  gameType     GameType
  nextMatchId  Int?
  nextMatch    Match?     @relation("NextMatch", fields: [nextMatchId], references: [id])
  prevMatches  Match[]    @relation("NextMatch")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum Pool {
  A
  B
  C
  D
}

model Team {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  name         String
  pool         Pool
  seed         Int? // Seeding for playoffs. Can be Within own pool or total
  finalRank    Int? // Final rankings
  teamAScores  Score[]    @relation("TeamAScores")
  teamBScores  Score[]    @relation("TeamBScores")
  teamAMatches Match[]    @relation("TeamAMatches")
  teamBMatches Match[]    @relation("TeamBMatches")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum UserRole {
  STANDARD
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
